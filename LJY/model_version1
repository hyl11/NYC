
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
import json

def lgb_rmsle_score(preds, dtrain):
    labels = np.exp(dtrain.get_label())
    preds = np.exp(preds.clip(min=0))
    return 'rmsle', np.sqrt(np.mean(np.square(np.log1p(preds)-np.log1p(labels)))), False

data = pd.read_csv('result.csv')
test = pd.read_csv('test_result.csv')

data = pd.read_csv('result.csv')
test = pd.read_csv('test_result.csv')

#选取变量的对应列，可扩充
feature_testcols = ['vendor_id','passenger_count','pickup_longitude','pickup_latitude',
                    'dropoff_longitude','dropoff_latitude','pick_month','hour',
                    'week_of_year','day_of_year','day_of_week','hvsine_pick_drop',
                    'manhtn_pick_drop','bearing','label_pick','label_drop',
                    'centroid_pick_long','centroid_pick_lat','centroid_drop_long',
                    'centroid_drop_lat','hvsine_pick_cent_p','hvsine_drop_cent_d',
                    'hvsine_cent_p_cent_d','manhtn_pick_cent_p','manhtn_drop_cent_d',
                    'manhtn_cent_p_cent_d','bearing_pick_cent_p','bearing_drop_cent_p',
                    'bearing_cent_p_cent_d','pickup_pca0','pickup_pca1','dropoff_pca0',
                    'dropoff_pca1','havsine_pick_drop','speed_hvsn','speed_manhtn']
#print(data.shape)

#得到特征对应的矩阵，命名为X，
X = data[feature_testcols]
y = data['trip_duration']
X_train, X_eval, y_train, y_eval = train_test_split(X,y, test_size=0.2, random_state=2)

lgb_train = lgb.Dataset(X_train, y_train)
lgb_eval = lgb.Dataset(X_eval.values, y_eval.values, reference = lgb_train)
params = {'metric': 'rmse', 'learning_rate' : 0.05, 'num_leaves': 512,
         'feature_fraction': 0.9,'bagging_fraction':0.9,'bagging_freq':5,'min_data_in_leaf': 500}
lgb_model = lgb.train(params, lgb_train, num_boost_round = 200, valid_sets = lgb_eval,
             feature_name=feature_testcols, early_stopping_rounds=10,  verbose_eval = 10)
del lgb_train
gc.collect()

pred1 = lgb_model.predict(X_train.values, num_iteration = lgb_model.best_iteration)
pred2 = lgb_model.predict(X_eval.values, num_iteration = lgb_model.best_iteration)
rmsle1= (((y_train-pred1)**2).mean())**0.5
rmsle2 = (((y_eval-pred2)**2).mean())**0.5
print('train score: {:.4f}   eval score: {:.4f}'.format(rmsle1,rmsle2))


